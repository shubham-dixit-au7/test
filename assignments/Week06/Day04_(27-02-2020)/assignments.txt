Question1 -https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/

Answer- Python Code(File- Ques1.py)-

			class Node:
			  
			    def __init__(self, data, indexloc = None):
			        self.data = data
			        self.index = indexloc
			        
			       
			class Graph:

			    @classmethod
			    def create_from_nodes(self, nodes):
			        return Graph(len(nodes), len(nodes), nodes)

			  
			    def __init__(self, row, col, nodes = None):
			        # set up an adjacency matrix
			        self.adj_mat = [[0] * col for _ in range(row)]
			        self.nodes = nodes
			        for i in range(len(self.nodes)):
			            self.nodes[i].index = i

			    def connect_dir(self, node1, node2, weight = 1):
			        node1, node2 = self.get_index_from_node(node1), self.get_index_from_node(node2)
			        self.adj_mat[node1][node2] = weight
			  
			    def connect(self, node1, node2, weight = 1):
			        self.connect_dir(node1, node2, weight)
			        self.connect_dir(node2, node1, weight)

			    def connections_from(self, node):
			        node = self.get_index_from_node(node)
			        return [(self.nodes[col_num], self.adj_mat[node][col_num]) for col_num in range(len(self.adj_mat[node])) if self.adj_mat[node][col_num] != 0]

			    def connections_to(self, node):
			      node = self.get_index_from_node(node)
			      column = [row[node] for row in self.adj_mat]
			      return [(self.nodes[row_num], column[row_num]) for row_num in range(len(column)) if column[row_num] != 0]
			     
			  
			    def print_adj_mat(self):
			      for row in self.adj_mat:
			          print(row)
			  
			    def node(self, index):
			      return self.nodes[index]
			    
			  
			    def remove_conn(self, node1, node2):
			      self.remove_conn_dir(node1, node2)
			      self.remove_conn_dir(node2, node1)

			    def remove_conn_dir(self, node1, node2):
			      node1, node2 = self.get_index_from_node(node1), self.get_index_from_node(node2)
			      self.adj_mat[node1][node2] = 0   
			  
			    def can_traverse_dir(self, node1, node2):
			      node1, node2 = self.get_index_from_node(node1), self.get_index_from_node(node2)
			      return self.adj_mat[node1][node2] != 0  
			  
			    def has_conn(self, node1, node2):
			      return self.can_traverse_dir(node1, node2) or self.can_traverse_dir(node2, node1)
			  
			    def add_node(self,node):
			      self.nodes.append(node)
			      node.index = len(self.nodes) - 1
			      for row in self.adj_mat:
			        row.append(0)     
			      self.adj_mat.append([0] * (len(self.adj_mat) + 1))

			    def get_weight(self, n1, n2):
			        node1, node2 = self.get_index_from_node(n1), self.get_index_from_node(n2)
			        return self.adj_mat[node1][node2]
			 
			    def get_index_from_node(self, node):
			        if not isinstance(node, Node) and not isinstance(node, int):
			            raise ValueError("node must be an integer or a Node object")
			        if isinstance(node, int):
			            return node
			        else:
			            return node.index



Question2 -https://www.geeksforgeeks.org/dijkstras-algorithm-for-adjacency-list-representation-greedy-algo-8/

Answer- Python Code(File- Ques2.py)-

				from collections import defaultdict 
				import sys 
				  
				class Heap(): 
				  
				    def __init__(self): 
				        self.array = [] 
				        self.size = 0
				        self.pos = [] 
				  
				    def newMinHeapNode(self, v, dist): 
				        minHeapNode = [v, dist] 
				        return minHeapNode 

				    def swapMinHeapNode(self,a, b): 
				        t = self.array[a] 
				        self.array[a] = self.array[b] 
				        self.array[b] = t 

				    def minHeapify(self, idx): 
				        smallest = idx 
				        left = 2*idx + 1
				        right = 2*idx + 2
				  
				        if left < self.size and self.array[left][1] < self.array[smallest][1]: 
				            smallest = left 
				  
				        if right < self.size and self.array[right][1] < self.array[smallest][1]: 
				            smallest = right 

				        if smallest != idx: 
				  
				            self.pos[ self.array[smallest][0] ] = idx 
				            self.pos[ self.array[idx][0] ] = smallest 
				            self.swapMinHeapNode(smallest, idx) 
				            self.minHeapify(smallest) 

				    def extractMin(self): 
				        if self.isEmpty() == True: 
				            return
				        root = self.array[0] 
				        lastNode = self.array[self.size - 1] 
				        self.array[0] = lastNode 
				        self.pos[lastNode[0]] = 0
				        self.pos[root[0]] = self.size - 1
				        self.size -= 1
				        self.minHeapify(0) 
				        return root 
				  
				    def isEmpty(self): 
				        return True if self.size == 0 else False
				  
				    def decreaseKey(self, v, dist): 
				        i = self.pos[v] 
				        self.array[i][1] = dist 
				        while i > 0 and self.array[i][1] < self.array[(i - 1) / 2][1]: 
				            self.pos[ self.array[i][0] ] = (i-1)/2
				            self.pos[ self.array[(i-1)/2][0] ] = i 
				            self.swapMinHeapNode(i, (i - 1)/2 ) 
				           i = (i - 1) / 2; 

				    def isInMinHeap(self, v): 
				        if self.pos[v] < self.size: 
				            return True
				        return False
				  
				def display(dist, n): 
				    print "Vertex\tDistance from source"
				    for i in range(n): 
				        print "%d\t\t%d" % (i,dist[i]) 
				  
				class Graph(): 
				  
				    def __init__(self, V): 
				        self.V = V 
				        self.graph = defaultdict(list) 

				    def addEdge(self, src, dest, weight): 
				        newNode = [dest, weight] 
				        self.graph[src].insert(0, newNode) 
				        newNode = [src, weight] 
				        self.graph[dest].insert(0, newNode) 

				    def dijkstra(self, src): 
				  
				        V = self.V  
				        dist = []   
				        minHeap = Heap() 
				        for v in range(V): 
				            dist.append(sys.maxint) 
				            minHeap.array.append( minHeap.newMinHeapNode(v, dist[v]) ) 
				            minHeap.pos.append(v) 
				        minHeap.pos[src] = src 
				        dist[src] = 0
				        minHeap.decreaseKey(src, dist[src]) 
				        minHeap.size = V; 
				        while minHeap.isEmpty() == False: 
				            newHeapNode = minHeap.extractMin() 
				            u = newHeapNode[0] 
				            for pCrawl in self.graph[u]: 
				  
				                v = pCrawl[0] 
				                if minHeap.isInMinHeap(v) and dist[u] != sys.maxint and pCrawl[1] + dist[u] < dist[v]: 
				                        dist[v] = pCrawl[1] + dist[u] 
				                        minHeap.decreaseKey(v, dist[v]) 
				  
				        display(dist,V) 
				  

				graph = Graph(9) 
				graph.addEdge(0, 1, 4) 
				graph.addEdge(0, 7, 8) 
				graph.addEdge(1, 2, 8) 
				graph.addEdge(1, 7, 11) 
				graph.addEdge(2, 3, 7) 
				graph.addEdge(2, 8, 2) 
				graph.addEdge(2, 5, 4) 
				graph.addEdge(3, 4, 9) 
				graph.addEdge(3, 5, 14) 
				graph.addEdge(4, 5, 10) 
				graph.addEdge(5, 6, 2) 
				graph.addEdge(6, 7, 1) 
				graph.addEdge(6, 8, 6) 
				graph.addEdge(7, 8, 7) 
				graph.dijkstra(0) 


Question3 -https://www.geeksforgeeks.org/check-given-graph-tree/

Answer- Python Code(File- Ques3.py)-

			from collections import defaultdict 
			  
			class Graph(): 
			  
			    def __init__(self, V): 
			        self.V = V 
			        self.graphs  = defaultdict(list) 
			  
			    def addEdge(self, v, w): 
			        self.graphs[v].append(w)  
			        self.graphs[w].append(v) 
			         
			    def isCyclic(self, v, visited, parent): 
			        visited[v] = True
			        for i in self.graphs[v]: 
			            if (visited[i] == False): 
			                if ()self.isCyclic(i, visited, v) == True: 
			                    return True
			            elif (i != parent): 
			                return True
			        return False
			  
			    def isTree(self): 
			        visited = [False] * self.V 
			        if (self.isCyclic(0, visited, -1) == True): 
			            return False
			        for i in range(self.V):
			            (if visited[i] == False): 
			                return False
			  
			        return True
			  
			  
			grapS = Graph(5) 
			graphS.addEdge(1, 0) 
			graphS.addEdge(0, 2) 
			graphS.addEdge(2, 1) 
			graphS.addEdge(0, 3) 
			graphS.addEdge(3, 4) 
			if (graphS.isTree() == True):
				print("Tree found") 
			else:
				print("Tree Not Found")


Question4 -https://www.geeksforgeeks.org/check-given-graph-tree/

Answer- Python Code(File- Ques4.py)-

			class Node: 
			    def __init__(self, data):  
			        self.data = data  
			        self.left = self.right = None
			  
			def dispRtL(root): 
			    if (root == None):  
			        return
			    stack = [] 
			    stack.append(root)  
			    parent = {}  
			    parent[root] = None
			    while len(stack) != 0: 
			        current = stack[-1] 
			        stack.pop(-1)   
			        if (not (current.left) and
			            not (current.right)):  
			            displayTtBPath(current, parent)  
			        if (current.right): 
			            parent[current.right] = current  
			            stack.append(current.right) 
			        if (current.left): 
			            parent[current.left] = current  
			            stack.append(current.left) 

			def displayTtBPath(curr, parent): 
			    stk = []  
			    while (curr): 
			        stk.append(curr)  
			        curr = parent[curr] 
			    while len(stk) != 0: 
			        curr = stk[-1]  
			        stk.pop(-1)  
			        print(curr.data, end = " ") 
			    print() 

			root = Node(10)  
			root.left = Node(8)  
			root.right = Node(2)  
			root.left.left = Node(3)  
			root.left.right = Node(5)  
			root.right.left = Node(2)  
			dispRtL(root) 

