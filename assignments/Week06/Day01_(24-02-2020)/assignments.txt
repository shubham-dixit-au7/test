Question 1- Implement Stacks using Queues

Answer- Python Code(File- Ques1.py)-
					class Stack: 
					    def __init__(self): 
					        self.q1 = Queue() 
					        self.q2 = Queue()  
					        self.curr_size = 0
					  
					    def push(self, x): 
					        self.curr_size += 1
					        self.q2.put(x)  
					        while (not self.q1.empty()): 
					            self.q2.put(self.q1.queue[0])  
					            self.q1.get() 
					        self.q = self.q1  
					        self.q1 = self.q2  
					        self.q2 = self.q 
					  
					    def pop(self): 
					        if (self.q1.empty()):  
					            return
					        self.q1.get()  
					        self.curr_size -= 1
					  
					    def top(self): 
					        if (self.q1.empty()): 
					            return -1
					        return self.q1.queue[0] 
					  
					    def size(self): 
					        return self.curr_size 
					  
					if __name__ == '__main__': 
					    s = Stack() 
					    s.push(1)  
					    s.push(2)  
					    s.push(3)  
					    print("current size: ", s.size()) 
					    print(s.top())  
					    s.pop()  
					    print(s.top())  
					    s.pop()  
					    print(s.top())  
					    print("current size: ", s.size()) 

		

Question 2- Implement Queues using Stacks


Answer- Python Code( Ques2.py)-

					class Queue:  
					    def __init__(self): 
					        self.s1 = [] 
					        self.s2 = [] 
					  
					    def enQueue(self, x): 
					        while len(self.s1) != 0:  
					            self.s2.append(self.s1[-1])  
					            self.s1.pop() 
					        self.s1.append(x)  
					        while len(self.s2) != 0:  
					            self.s1.append(self.s2[-1])  
					            self.s2.pop() 
					  
					    def deQueue(self): 
					        if len(self.s1) == 0:  
					            print("Q is Empty") 
					        x = self.s1[-1]  
					        self.s1.pop()  
					        return x 
					  
					if __name__ == '__main__': 
					    q = Queue() 
					    q.enQueue(1)  
					    q.enQueue(2)  
					    q.enQueue(3)  
					  
					    print(q.deQueue()) 
					    print(q.deQueue()) 
					    print(q.deQueue()) 

		
