Question 1- Given a sorted array of integers A(0 based index) of size N, find the starting and ending position of a given integer B in array 
			A.
			Your algorithm runtime complexity must be in the order of O(log n). Return an array of size 2, such that first element = starting position of B in A and second element = ending position of B in A, if B is not found in A return [-1, -1].

			Input 1:
			A = [5, 7, 7, 8, 8, 10]
			B = 8
			Output 1:
			[3, 4]
			Explanation 1:
			First occurence of 8 in A is at index 3
			Second occurence of 8 in A is at index 4
			ans = [3, 4]

			Input 2:
			A = [5, 17, 100, 111]
			B = 3
			Output 2:
			[-1, -1]

Answer- Python Code(File- Ques1.py)-

					def findIndexOfTarget(lst, size, target) : 
					    first = -1
					    last = -1
					    indexLst = []
					    for i in range(0,size) : 
					        if (target != lst[i]) : 
					            continue
					        if (first == -1) : 
					            first = i 
					        last = i 
					      
					    if (first != -1) : 
					        indexLst.extend([first, last])
					        return indexLst
					    else : 
					        return [-1, -1] 

					lst =[]
					size= int(input("Enter the  size of the list -> "))
					for i in range (0,size):
					    elem=int(input())
					    lst.append(elem)
					target = int(input("Enter the target value -> "))
					print(findIndexOfTarget(lst, size, target)) 



		

Question 2- Write the code for binary search without using loops. [optional]

Answer- Python Code( Ques2.py)-

			def binarySearch (arr, l, r, x): 
			    if r >= l: 
			        mid = l + (r - l)//2
			        if arr[mid] == x: 
			            return mid 
			        elif arr[mid] > x: 
			            return binarySearch(arr, l, mid-1, x) 
			        else: 
			            return binarySearch(arr, mid+1, r, x) 
			    else:  
			        return -1

			arr = [ 2, 3, 4, 10, 40 ] 
			x = 10
			result = binarySearch(arr, 0, len(arr)-1, x) 
			if result != -1: 
			    print ("Element is present at index ", result) 
			else: 
			    print ("Element is not present in array")
		
