Question 1) https://www.geeksforgeeks.org/pairwise-swap-elements-of-a-given-linked-list/

Answer- Python Code(File- Ques1.py)-
					class Node: 
					    def __init__(self, data): 
					        self.data = data 
					        self.next = None
					  
					class LinkedList: 
					    def __init__(self): 
					        self.head = None


					    def pairwiseSwap(self): 
					        temp = self.head 
					        if temp is None: 
					            return 
					        while(temp is not None and temp.next is not None): 
					            temp.data, temp.next.data = temp.next.data, temp.data  
					            temp = temp.next.next
					         
					    def push(self, new_data): 
					        new_node = Node(new_data) 
					        new_node.next = self.head 
					        self.head = new_node 
					  
					    def printList(self): 
					        temp = self.head 
					        while(temp): 
					            print temp.data, 
					            temp = temp.next
					  
					  
					llist = LinkedList() 
					llist.push(5) 
					llist.push(4) 
					llist.push(3) 
					llist.push(2) 
					llist.push(1) 
					  
					print ("Linked list before calling pairWiseSwap() ")
					llist.printList() 
					  
					llist.pairwiseSwap() 
					  
					print  ("\nLinked list after calling pairWiseSwap()")
					llist.printList() 

				

Question 2) https://www.geeksforgeeks.org/quicksort-on-singly-linked-list/

Answer- Python Code(File- Ques2.py)-

				def quickSort(data_list):
				    quickSortHlp(data_list,0,len(data_list)-1)

				def quickSortHlp(data_list,first,last):
				    if first < last:
				        splitpoint = partition(data_list,first,last)
				        quickSortHlp(data_list,first,splitpoint-1)
				        quickSortHlp(data_list,splitpoint+1,last)

				def partition(data_list,first,last):
				    pivotvalue = data_list[first]
				    leftmark = first+1
				    rightmark = last
				    done = False
				    while not done:
				        while leftmark <= rightmark and data_list[leftmark] <= pivotvalue:
				            leftmark = leftmark + 1
				            while data_list[rightmark] >= pivotvalue and rightmark >= leftmark:
				                rightmark = rightmark -1
				                if rightmark < leftmark:
				                    done = True
				                else:
				                    temp = data_list[leftmark]
				                    data_list[leftmark] = data_list[rightmark]
				                    data_list[rightmark] = temp
				                    temp = data_list[first]
				                    data_list[first] = data_list[rightmark]
				                    data_list[rightmark] = temp
				                    return rightmark

				data_list = [54,26,93,17,77,31,44,55,20]

				res = quickSort(data_list)

				print(res)

				

Question 3) https://www.geeksforgeeks.org/reverse-a-linked-list/

Answer- Python Code(File- Ques3.py)-
				class Node: 
				    def __init__(self, data): 
				        self.data = data 
				        self.next = None
				  
				class LinkedList: 
				    def __init__(self): 
				        self.head = None
				  
				    def reverse(self): 
				        prev = None
				        current = self.head 
				        while(current is not None): 
				            next = current.next
				            current.next = prev 
				            prev = current 
				            current = next
				        self.head = prev 
				          
				    def push(self, new_data): 
				        new_node = Node(new_data) 
				        new_node.next = self.head 
				        self.head = new_node 
				  
				    def printList(self): 
				        temp = self.head 
				        while(temp): 
				            print temp.data, 
				            temp = temp.next
				    
				llist = LinkedList() 
				llist.push(20) 
				llist.push(4) 
				llist.push(15) 
				llist.push(85) 
				  
				print ("Given Linked List")
				llist.printList() 
				llist.reverse() 
				print ("\nReversed Linked List")
				llist.printList() 

				